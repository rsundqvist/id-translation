[tool.poetry]
name = "id-translation"
version = "0.9.0"
description = "Convert IDs into human-readable labels."
authors = ["Richard Sundqvist <richard.sundqvist@live.se>"]

readme = "README.md"
homepage = "https://github.com/rsundqvist/id-translation"
repository = "https://github.com/rsundqvist/id-translation"
documentation = "https://id-translation.readthedocs.io"
keywords = ["id-translation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]


[tool.poetry.urls]
"Bug Tracker" = "https://github.com/rsundqvist/id-translation/issues"
"Changelog" = "https://github.com/rsundqvist/id-translation/blob/master/CHANGELOG.md"

[tool.poetry.scripts]


[tool.poetry.dependencies]
python = "<4,>=3.11"

pandas = ">=2.0.3"
sqlalchemy = ">=2.0.5"  # 2.0.5 (YANKED) is the minimum version where UUID tests pass for Microsoft SQL server.
rics = ">=4.0.1"

[tool.poetry.group.docs]
[tool.poetry.group.docs.dependencies]
# duplicate object warnings for sphinx>=4
# description: https://github.com/astropy/astropy/issues/11723
# https://github.com/astropy/astropy/pull/12270
sphinx = "^7.2.6"
sphinx-gallery = "^0.15.0"
pydata-sphinx-theme = "^0.15.2"
myst-parser = "^2.0.0"
nbsphinx = "^0.9.3"
ipython = "^8.22.2"
sphinxcontrib-programoutput = "^0.17.0"

[tool.poetry.group.notebooks]
optional = true
[tool.poetry.group.notebooks.dependencies]
jupyterlab = ">=3,<5"
ipywidgets = "*"
jupyterlab-execute-time = "*"
tqdm = "*"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
xdoctest = "^1.1.3"
coverage = "^7.4.4"
pytest-cov = "^4.1.0"

# Minio tests
s3fs = { version = "^2024.2.0", platform = "linux" }

# db drivers and related dependencies
pg8000 = "^1.30.5"
pymssql = "^2.2.11"
pymysql = "^1.1.0 "
cryptography = "*"

[tool.poetry.group.devops.dependencies]
invoke = "^2.2.0"
mypy = "^1.9.0"
ruff = "^0.3.3"

safety = "^3.0.1"
codespell = "^2.2.6"
bump2version = "^1.0.1"

[tool.ruff]
line-length = 120
fix = true
unsafe-fixes = false
output-format = "grouped"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80
line-ending = "lf"

[tool.ruff.lint]
exclude = ["notebooks/*"]
select = [
    "ANN",
    "S",
    "I",
    "B",
    "D",
    "F",
    "W",
    "E",
    "SLOT",
    "SIM",
    "TID",
    # "TD", TODOs
    "TCH",
    "ARG",
    "PTH",
    "NPY",
    "PD",
    "N",
    "PERF",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "UP",
    "FURB",
    "RUF",
    "TRY",
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in method
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "ANN401",
    "TID252", # Prefer absolute imports over relative imports from parent modules
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving this statement to an `else` block
    "PD901", # Avoid using the generic variable name `df` for DataFrames
    "PLC0415", # `import` should be at the top-level of a file
    "PLR0913", #
    "SIM108", #  Use ternary operator - coverage issue, see https://github.com/nedbat/coveragepy/issues/509
]
allowed-confusables = ["ℹ"]  # ℹ️INFO in docstrings

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "S101", # Allow 'assert' keyword
    "ANN",
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PLR2004", # Allow magic values
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
]
"tests/offline/test_placeholder_translations.py" = ["PTH123"]
"tests/mapping/*" = ["ARG003", "ARG004", "ARG005"]

# D102 Missing docstring in public method - Docstrings are inherited, but linters
# can't realiably know this unless they import the code.
"src/id_translation/offline/_translation_map.py" = ["D102"]
"src/id_translation/testing.py" = ["D102"]


[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.pytest]
[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore:Did not recognize type:sqlalchemy.exc.SAWarning",
    "ignore:No fetcher given:UserWarning",
]
log_file_level = 10
log_file = "pytest.log"


[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"
